{"version":3,"sources":["app/components/screen.jsx","app/components/operators.jsx","app/components/enterButtons.jsx","app/components/equal.jsx","app/components/allButtons.jsx","app/App.jsx","reportWebVitals.js","index.js"],"names":["Screen","display","className","Operators","operators","onOperationDown","onOperationUp","map","operator","i","onMouseDown","onClick","EnterButtons","characters","onButtonDown","onButtonUp","onReset","character","id","Equal","onAnswer","onFixedValue","AllButtons","blockOperators","blockOfCharacters","App","useState","setDisplay","firstOp","setFirstOp","secondOp","setSecondOp","operation","setOperation","state","setState","result","setResult","methods","a","b","useEffect","console","log","buttonValue","length","includes","target","innerText","op","resultExp","Number","toFixed","replace","JSON","stringify","toString","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d72bcbe9.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Screen = ({ display }) => {\r\n    return <div className=\"input\">{display}</div>;\r\n};\r\n\r\nScreen.propTypes = {\r\n    display: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Screen;\r\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Operators = ({ operators, onOperationDown, onOperationUp }) => {\n    return (\n        <>\n            {operators.map((operator, i) => (\n                <div\n                    key={i}\n                    onMouseDown={onOperationDown}\n                    onClick={() => onOperationUp(operator)}\n                >\n                    {operator}\n                </div>\n            ))}\n        </>\n    );\n};\nOperators.propTypes = {\n    operators: PropTypes.array.isRequired,\n    onOperationDown: PropTypes.func.isRequired,\n    onOperationUp: PropTypes.func.isRequired\n};\nexport default Operators;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst EnterButtons = ({ characters, onButtonDown, onButtonUp, onReset }) => {\n    return (\n        <>\n            <div className=\"numbers\">\n                {characters.map((character) => {\n                    if (character !== \"AC\") {\n                        return (\n                            <div\n                                key={character}\n                                id={character}\n                                onMouseDown={() => onButtonDown(character)}\n                                onClick={onButtonUp}\n                            >\n                                {character}\n                            </div>\n                        );\n                    } else {\n                        return (\n                            <div\n                                key={character}\n                                id={character}\n                                onClick={onReset}\n                            >\n                                {character}\n                            </div>\n                        );\n                    }\n                })}\n            </div>\n        </>\n    );\n};\n\nEnterButtons.propTypes = {\n    characters: PropTypes.array.isRequired,\n    onButtonDown: PropTypes.func.isRequired,\n    onButtonUp: PropTypes.func.isRequired,\n    onReset: PropTypes.func.isRequired\n};\n\nexport default EnterButtons;\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Equal = ({ onAnswer, onFixedValue }) => {\r\n    return (\r\n        <div className=\"equal\" onClick={onAnswer} onMouseDown={onFixedValue}>\r\n            =\r\n        </div>\r\n    );\r\n};\r\nEqual.propTypes = {\r\n    onAnswer: PropTypes.func.isRequired,\r\n    onFixedValue: PropTypes.func.isRequired\r\n};\r\nexport default Equal;\r\n","import React from \"react\";\nimport Operators from \"./operators\";\nimport EnterButtons from \"./enterButtons\";\nimport Equal from \"./equal\";\nimport PropTypes from \"prop-types\";\n\nconst AllButtons = ({\n    blockOperators,\n    blockOfCharacters,\n    onButtonDown,\n    onButtonUp,\n    onOperationDown,\n    onOperationUp,\n    onFixedValue,\n    onAnswer,\n    onReset\n}) => {\n    return (\n        <div className=\"buttons\">\n            <div className=\"operators\">\n                <Operators\n                    operators={blockOperators}\n                    onOperationDown={onOperationDown}\n                    onOperationUp={onOperationUp}\n                />\n            </div>\n            <div className=\"leftPanel\">\n                {blockOfCharacters.map((characters, i) => (\n                    <EnterButtons\n                        key={i}\n                        characters={characters}\n                        onButtonDown={onButtonDown}\n                        onButtonUp={onButtonUp}\n                        onReset={onReset}\n                    />\n                ))}\n            </div>\n            <Equal onAnswer={onAnswer} onFixedValue={onFixedValue} />\n        </div>\n    );\n};\n\nAllButtons.propTypes = {\n    blockOperators: PropTypes.array.isRequired,\n    blockOfCharacters: PropTypes.array.isRequired,\n    onButtonDown: PropTypes.func.isRequired,\n    onButtonUp: PropTypes.func.isRequired,\n    onOperationDown: PropTypes.func.isRequired,\n    onOperationUp: PropTypes.func.isRequired,\n    onFixedValue: PropTypes.func.isRequired,\n    onAnswer: PropTypes.func.isRequired,\n    onReset: PropTypes.func.isRequired\n};\n\nexport default AllButtons;\n","import React, { useEffect, useState } from \"react\";\n\nimport Screen from \"./components/screen\";\nimport AllButtons from \"./components/allButtons\";\n\nfunction App() {\n    const blockOfCharacters = [\n        [\"7\", \"8\", \"9\"],\n        [\"4\", \"5\", \"6\"],\n        [\"1\", \"2\", \"3\"],\n        [\"0\", \".\", \"AC\"]\n    ];\n    const blockOperators = [\"+\", \"-\", \"*\", \"/\"];\n    const [display, setDisplay] = useState(\"0\"); // отображение на экране\n    const [firstOp, setFirstOp] = useState(\"\"); // первое введённое число\n    const [secondOp, setSecondOp] = useState(\"\"); // второе введённое число\n    const [operation, setOperation] = useState(null); // введённый оператор\n    const [state, setState] = useState(false); // сосотояние, определяющее в какой из операндов будет записываться вводимые числа\n    const [result, setResult] = useState(\"\"); // результат\n    const methods = {\n        \"+\": () => {\n            setOperation(() => (a, b) => a + b);\n            setSecondOp(\"\");\n            setDisplay(\"+\");\n        },\n        \"-\": () => {\n            setOperation(() => (a, b) => a - b);\n            setDisplay(\"-\");\n            setSecondOp(\"\");\n        },\n        \"*\": () => {\n            setOperation(() => (a, b) => a * b);\n            setDisplay(\"*\");\n            setSecondOp(\"\");\n        },\n        \"/\": () => {\n            setOperation(() => (a, b) => a / b);\n            setDisplay(\"/\");\n            setSecondOp(\"\");\n        }\n    };\n\n    const handleButtonDown = (buttonValue) => {\n        console.log(\"buttonValue:\", buttonValue);\n        console.log(\"display:\", display);\n        console.log(\"result:\", result);\n        console.log(\"display.length:\", display.length);\n        console.log(\n            \"display.includes(`.`) && buttonValue === `.`:\",\n            display.includes(\".\") && buttonValue === \".\"\n        );\n        console.log(\"firstOp__ButtonDown:\", firstOp);\n        if (display.length > 10) return;\n        if (!firstOp && state === false && result) {\n            buttonValue === \".\" ? setFirstOp(\"0.\") : setFirstOp(buttonValue);\n        } else {\n            if (display.includes(\".\") && buttonValue === \".\") return;\n        }\n        if (state) {\n            console.log(\"POINT__STATE-TRUE\");\n            if (!secondOp) {\n                buttonValue === \".\"\n                    ? setSecondOp(\"0.\")\n                    : setSecondOp(buttonValue);\n            } else {\n                setSecondOp(secondOp + buttonValue);\n                // setSecondOp((prev) => prev + buttonValue);\n\n                console.log(\"secondOp:\", secondOp);\n            }\n        } else {\n            if (!firstOp) {\n                console.log(\"POINT\");\n                buttonValue === \".\"\n                    ? setFirstOp(\"0.\")\n                    : setFirstOp(buttonValue);\n            } else {\n                console.log(\"POINT__Else\");\n                setFirstOp(firstOp + buttonValue);\n            }\n        }\n    };\n\n    const handleButtonUp = ({ target }) => {\n        console.log(\"target.innerText:\", target.innerText);\n        if (!state) {\n            setDisplay(firstOp);\n        } else {\n            setDisplay(secondOp);\n        }\n        console.log(\"firstOp__DISPLAY:\", firstOp);\n        console.log(\"secondOp__DISPLAY:\", secondOp);\n        console.log(\"operation__DISPLAY:\", operation);\n        console.log(\"______________________________________________\");\n    };\n\n    const handleOperationDown = () => {\n        if (!firstOp && result && secondOp) {\n            setFirstOp(result);\n            setSecondOp(\"\");\n        }\n    };\n\n    const handleOperationUp = (op) => {\n        if (firstOp) {\n            setOperation(methods[op]);\n            setState(true);\n        }\n\n        if (firstOp && secondOp) {\n            let resultExp = operation(Number(firstOp), Number(secondOp))\n                .toFixed(8)\n                .replace(/[,.]?0+$/, \"\");\n            if (resultExp.length > 18) {\n                resultExp = \"ERROR\";\n            }\n            setResult(resultExp);\n            setFirstOp(resultExp);\n        }\n        console.log(\"result__OP__UP:\", result);\n        console.log(\"operation__OP__UP:\", operation);\n        console.log(\"firstOp__OP__UP:\", firstOp);\n        console.log(\"secondOp__OP__UP:\", secondOp);\n        console.log(\"______________________________________________\");\n    };\n\n    // useEffect(() => {\n    //     if (firstOp && secondOp) {\n    //         let resultExp = operation(Number(firstOp), Number(secondOp))\n    //             .toFixed(8)\n    //             .replace(/[,.]?0+$/, \"\");\n    //         if (resultExp.length > 18) {\n    //             resultExp = \"ERROR\";\n    //         }\n    //         setResult(resultExp);\n    //         setFirstOp(resultExp);\n    //     }\n    // }, [operation]);\n\n    const handleEqualFixedValue = () => {\n        if (!firstOp && result) {\n            setFirstOp(result);\n        }\n\n        console.log(\"result__EQUAL__DOWN:\", result);\n        console.log(\"operation__EQUAL__DOWN:\", operation);\n        console.log(\"JSON__2:\", JSON.stringify(operation));\n        console.log(\"firstOp__EQUAL__DOWN:\", firstOp);\n        console.log(\"secondOp__EQUAL__DOWN:\", secondOp);\n        console.log(\"______________________________________________\");\n    };\n\n    useEffect(() => {\n        console.log(\"display__EQUAL__DOWN___useEffect:\", display);\n        console.log(\"firstOp__EQUAL__DOWN___useEffect:\", firstOp);\n        console.log(\"result__EQUAL__DOWN___useEffect:\", result);\n        console.log(\"operation__EQUAL__DOWN___useEffect:\", operation);\n        console.log(\"secondOp__EQUAL__DOWN___useEffect:\", secondOp);\n        console.log(\"state__EQUALDOWN___useEffect:\", state);\n        console.log(\"************useEffect*****************\");\n    }, [firstOp]);\n\n    const handleEqualAnswer = () => {\n        console.log(\n            `operation?.toString() === \"(a, b) => a / b\" && secondOp === \"0\"`,\n            operation?.toString() === \"(a, b) => a / b\" && secondOp === \"0\"\n        );\n        if (operation?.toString() === \"(a, b) => a / b\" && secondOp === \"0\") {\n            setDisplay(\"impossible\");\n            setState(false);\n            setFirstOp(\"\");\n            setSecondOp(\"\");\n            setOperation(null);\n            return;\n        }\n        if (firstOp && operation) {\n            let resultExp = operation(Number(firstOp), Number(secondOp))\n                .toFixed(8)\n                .replace(/[,.]?0+$/, \"\");\n            if (resultExp.length > 18) {\n                resultExp = \"ERROR\";\n            }\n            setResult(resultExp);\n            setDisplay(resultExp);\n\n            setState(false);\n            setFirstOp(\"\");\n        }\n        console.log(\"result__EQUAL__UP:\", result);\n        console.log(\"operation__EQUAL__UP:\", operation);\n        console.log(\"firstOp__EQUAL__UP:\", firstOp);\n        console.log(\"secondOp__EQUAL__UP:\", secondOp);\n        console.log(\"______________________________________________\");\n    };\n\n    useEffect(() => {\n        console.log(\"result__useEffect:\", result);\n        console.log(\"operation__useEffect:\", operation);\n        console.log(\"firstOp__useEffect:\", firstOp);\n        console.log(\"secondOp__useEffect:\", secondOp);\n        console.log(\"state__EQUAL__UP:\", state);\n        console.log(\"______________________________________________\");\n    }, [result]);\n\n    const handleReset = () => {\n        setFirstOp(\"\");\n        setOperation(null);\n        setSecondOp(\"\");\n        setDisplay(\"0\");\n    };\n    return (\n        <div className=\"calculator\">\n            <Screen display={display} />\n            <AllButtons\n                blockOfCharacters={blockOfCharacters}\n                blockOperators={blockOperators}\n                onButtonDown={handleButtonDown}\n                onButtonUp={handleButtonUp}\n                onOperationDown={handleOperationDown}\n                onOperationUp={handleOperationUp}\n                onFixedValue={handleEqualFixedValue}\n                onAnswer={handleEqualAnswer}\n                onReset={handleReset}\n            />\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry);\n                getFID(onPerfEntry);\n                getFCP(onPerfEntry);\n                getLCP(onPerfEntry);\n                getTTFB(onPerfEntry);\n            }\n        );\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./app/App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}