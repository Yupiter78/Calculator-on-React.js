{"version":3,"sources":["app/components/screen.jsx","app/components/operators.jsx","app/components/enterButtons.jsx","app/components/equal.jsx","app/components/allButtons.jsx","app/App.jsx","reportWebVitals.js","index.js"],"names":["Screen","display","className","Operators","operators","onOperationUp","map","operator","i","onClick","EnterButtons","characters","onButtonDown","onButtonUp","onReset","character","id","onMouseDown","Equal","onAnswer","onFixedValue","AllButtons","blockOperators","blockOfCharacters","App","useState","setDisplay","firstOp","setFirstOp","secondOp","setSecondOp","operation","setOperation","state","setState","result","setResult","methods","a","b","buttonValue","length","includes","op","resultExp","Number","toFixed","replace","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c4f31831.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Screen = ({ display }) => {\r\n    return <div className=\"input\">{display}</div>;\r\n};\r\n\r\nScreen.propTypes = {\r\n    display: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Screen;\r\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Operators = ({ operators, onOperationUp }) => {\n    return (\n        <>\n            {operators.map((operator, i) => (\n                <div key={i} onClick={() => onOperationUp(operator)}>\n                    {operator}\n                </div>\n            ))}\n        </>\n    );\n};\nOperators.propTypes = {\n    operators: PropTypes.array.isRequired,\n    onOperationUp: PropTypes.func.isRequired\n};\nexport default Operators;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst EnterButtons = ({ characters, onButtonDown, onButtonUp, onReset }) => {\n    return (\n        <>\n            <div className=\"numbers\">\n                {characters.map((character) => {\n                    if (character !== \"AC\") {\n                        return (\n                            <div\n                                key={character}\n                                id={character}\n                                onMouseDown={() => onButtonDown(character)}\n                                onClick={onButtonUp}\n                            >\n                                {character}\n                            </div>\n                        );\n                    } else {\n                        return (\n                            <div\n                                key={character}\n                                id={character}\n                                onClick={onReset}\n                            >\n                                {character}\n                            </div>\n                        );\n                    }\n                })}\n            </div>\n        </>\n    );\n};\n\nEnterButtons.propTypes = {\n    characters: PropTypes.array.isRequired,\n    onButtonDown: PropTypes.func.isRequired,\n    onButtonUp: PropTypes.func.isRequired,\n    onReset: PropTypes.func.isRequired\n};\n\nexport default EnterButtons;\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Equal = ({ onAnswer, onFixedValue }) => {\r\n    return (\r\n        <div className=\"equal\" onClick={onAnswer} onMouseDown={onFixedValue}>\r\n            =\r\n        </div>\r\n    );\r\n};\r\nEqual.propTypes = {\r\n    onAnswer: PropTypes.func.isRequired,\r\n    onFixedValue: PropTypes.func.isRequired\r\n};\r\nexport default Equal;\r\n","import React from \"react\";\nimport Operators from \"./operators\";\nimport EnterButtons from \"./enterButtons\";\nimport Equal from \"./equal\";\nimport PropTypes from \"prop-types\";\n\nconst AllButtons = ({\n    blockOperators,\n    blockOfCharacters,\n    onButtonDown,\n    onButtonUp,\n    onOperationUp,\n    onFixedValue,\n    onAnswer,\n    onReset\n}) => {\n    return (\n        <div className=\"buttons\">\n            <div className=\"operators\">\n                <Operators\n                    operators={blockOperators}\n                    onOperationUp={onOperationUp}\n                />\n            </div>\n            <div className=\"leftPanel\">\n                {blockOfCharacters.map((characters, i) => (\n                    <EnterButtons\n                        key={i}\n                        characters={characters}\n                        onButtonDown={onButtonDown}\n                        onButtonUp={onButtonUp}\n                        onReset={onReset}\n                    />\n                ))}\n            </div>\n            <Equal onAnswer={onAnswer} onFixedValue={onFixedValue} />\n        </div>\n    );\n};\n\nAllButtons.propTypes = {\n    blockOperators: PropTypes.array.isRequired,\n    blockOfCharacters: PropTypes.array.isRequired,\n    onButtonDown: PropTypes.func.isRequired,\n    onButtonUp: PropTypes.func.isRequired,\n    onOperationUp: PropTypes.func.isRequired,\n    onFixedValue: PropTypes.func.isRequired,\n    onAnswer: PropTypes.func.isRequired,\n    onReset: PropTypes.func.isRequired\n};\n\nexport default AllButtons;\n","import React, { useState } from \"react\";\n\nimport Screen from \"./components/screen\";\nimport AllButtons from \"./components/allButtons\";\n\nfunction App() {\n    const blockOfCharacters = [\n        [\"7\", \"8\", \"9\"],\n        [\"4\", \"5\", \"6\"],\n        [\"1\", \"2\", \"3\"],\n        [\"0\", \".\", \"AC\"]\n    ];\n    const blockOperators = [\"+\", \"-\", \"*\", \"/\"];\n    const [display, setDisplay] = useState(\"0\");\n    const [firstOp, setFirstOp] = useState(\"\");\n    const [secondOp, setSecondOp] = useState(\"\");\n    const [operation, setOperation] = useState(null);\n    const [state, setState] = useState(false);\n    const [result, setResult] = useState(\"\");\n    const methods = {\n        \"+\": () => {\n            setOperation(() => (a, b) => a + b);\n            setSecondOp(\"\");\n            setDisplay(\"+\");\n        },\n        \"-\": () => {\n            setOperation(() => (a, b) => a - b);\n            setDisplay(\"-\");\n            setSecondOp(\"\");\n        },\n        \"*\": () => {\n            setOperation(() => (a, b) => a * b);\n            setDisplay(\"*\");\n            setSecondOp(\"\");\n        },\n        \"/\": () => {\n            setOperation(() => (a, b) => a / b);\n            setDisplay(\"/\");\n            setSecondOp(\"\");\n        }\n    };\n\n    const handleButtonDown = (buttonValue) => {\n        if (display.length > 8) return;\n        if (display.includes(\".\") && buttonValue === \".\") return;\n        if (state) {\n            if (!secondOp) {\n                buttonValue === \".\"\n                    ? setSecondOp(\"0.\")\n                    : setSecondOp(buttonValue);\n            } else {\n                setSecondOp(secondOp + buttonValue);\n            }\n        } else {\n            if (!firstOp) {\n                buttonValue === \".\"\n                    ? setFirstOp(\"0.\")\n                    : setFirstOp(buttonValue);\n            } else {\n                setFirstOp(firstOp + buttonValue);\n            }\n        }\n    };\n\n    const handleButtonUp = () => {\n        if (!state) {\n            setDisplay(firstOp);\n        } else {\n            setDisplay(secondOp);\n        }\n    };\n\n    const handleOperationUp = (op) => {\n        if (!operation || secondOp) {\n            setOperation(methods[op]);\n        }\n        setState(true);\n\n        if (!!firstOp && !!secondOp) {\n            let resultExp = operation(Number(firstOp), Number(secondOp))\n                .toFixed(8)\n                .replace(/[,.]?0+$/, \"\");\n            if (resultExp.length > 18) {\n                resultExp = \"ERROR\";\n            }\n            setResult(resultExp);\n            setFirstOp(resultExp);\n        }\n    };\n\n    const handleFixedValue = () => {\n        if (!firstOp && !!result) {\n            setFirstOp(result);\n        }\n    };\n\n    const handleAnswer = () => {\n        if (firstOp && operation) {\n            let resultExp = operation(Number(firstOp), Number(secondOp))\n                .toFixed(8)\n                .replace(/[,.]?0+$/, \"\");\n            if (resultExp.length > 18) {\n                resultExp = \"ERROR\";\n            }\n            setResult(resultExp);\n            setDisplay(resultExp);\n\n            setState(false);\n            setFirstOp(\"\");\n        }\n    };\n\n    const handleReset = () => {\n        setFirstOp(\"\");\n        setOperation(null);\n        setSecondOp(\"\");\n        setDisplay(\"0\");\n    };\n    return (\n        <div className=\"calculator\">\n            <Screen display={display} />\n            <AllButtons\n                blockOfCharacters={blockOfCharacters}\n                blockOperators={blockOperators}\n                onButtonDown={handleButtonDown}\n                onButtonUp={handleButtonUp}\n                onOperationUp={handleOperationUp}\n                onFixedValue={handleFixedValue}\n                onAnswer={handleAnswer}\n                onReset={handleReset}\n            />\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry);\n                getFID(onPerfEntry);\n                getFCP(onPerfEntry);\n                getLCP(onPerfEntry);\n                getTTFB(onPerfEntry);\n            }\n        );\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./app/App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}